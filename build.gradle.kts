import com.github.benmanes.gradle.versions.updates.DependencyUpdatesTask

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id("java-library")
    `maven-publish`
    id("project-report")
    id("com.diffplug.spotless")
    id("com.github.ben-manes.versions")
}

repositories {
    mavenLocal()
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

dependencies {
    api(libs.org.springframework.boot.spring.boot)
    api(libs.org.springframework.boot.spring.boot.autoconfigure)
    api(libs.org.springframework.spring.tx)
    api(libs.org.springframework.spring.beans)
    api(libs.org.springframework.spring.context)
    api(libs.org.springframework.data.spring.data.commons)
    api(libs.org.apache.httpcomponents.httpclient)
    api(libs.commons.codec.commons.codec)
    api(libs.com.fasterxml.jackson.core.jackson.core)
    api(libs.com.fasterxml.jackson.core.jackson.annotations)
    api(libs.com.fasterxml.jackson.core.jackson.databind)
    api(libs.org.hibernate.validator.hibernate.validator)
    api(libs.com.google.code.findbugs.annotations)
    api(libs.org.springframework.boot.spring.boot.configuration.processor)
    api(libs.org.jetbrains.annotations)
    testImplementation(libs.org.junit.jupiter.junit.jupiter)
    testImplementation(libs.org.mockito.mockito.junit.jupiter)
    testImplementation(libs.org.mockito.mockito.inline)
    testImplementation(libs.commons.io.commons.io)
    testImplementation(libs.org.springframework.boot.spring.boot.test)
    testImplementation(libs.org.springframework.spring.test)
    testImplementation(libs.ch.qos.logback.logback.classic)
    testImplementation(libs.org.yaml.snakeyaml)
    testImplementation(libs.org.openjdk.jmh.jmh.core)
    testImplementation(libs.org.openjdk.jmh.jmh.generator.annprocess)
    compileOnly(libs.org.projectlombok.lombok)
}

group = "com.groocraft"
version = "2.5.0-SNAPSHOT"
description = "Couch Slacker"
java.sourceCompatibility = JavaVersion.VERSION_1_8

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
}

fun isNonStable(version: String): Boolean {
    val stableKeyword = listOf("RELEASE", "FINAL", "GA").any { version.uppercase().contains(it) }
    val regex = "^[0-9,.v-]+(-r)?$".toRegex()
    val isStable = stableKeyword || regex.matches(version)
    return isStable.not()
}

tasks.withType<DependencyUpdatesTask> {
    resolutionStrategy {
        rejectVersionIf {
            isNonStable(candidate.version)
        }
    }
}
